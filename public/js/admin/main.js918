/**
 * global.js
 * @name 后台系统全局js
 * @author hus lay
 * @since 2018/2
 * @version 2.0
 */
var RPA = RPA || {};
RPA.prototype = {
    init: function(obj) {
        //event bind
        this.bind.call(this);
    },
    config: {
        modal: '#modal-lg',
        pjax: {
            container: '#pjax-container', //pjax 容器
            element: 'a:not(a[target="_blank"])', //pjax 监听对象
            obj: $(document),
            //load model element
            model: $(this.modal+' .modal-content .modal-body'),
        },
        NProgressParent: '#body', //nprogress 父级作用元素
        adminPopup: $('.navbar .navbar-nav .admin-info-list,.navbar .navbar-nav .admin-message'),
        sidebar: {
            obj:$('body aside .sidebar'),
            activeBar: sessionStorage.activeBar ? sessionStorage.activeBar : '/admin' ,
        },
    },
    bind: function() {
        var _this = this;
        //pjax
        _this.initPage();
        _this.pjaxOperation.init.call(this);

        //is or not scroll
        var screen_operation_obj = $('body .main-header.navbar a[data-toggle="fullscreen"]');
        screen_operation_obj.bind('click', function(e) {
            !_this.screenOperation.isFullscreenForNoScroll() ? _this.screenOperation.requestFullScreen() : _this.screenOperation.exitFull();
        });

        //toastr configure
        toastr.options = _this.toastOptions;

        // //moprogress
        NProgress.configure({ parent: '#pjax-container' });

        //异步请求csrf头
        $.ajaxSetup({
            headers: { 'X-CSRF-TOKEN': LA.token }
        });

        //快捷菜单
        _this.config.adminPopup.mouseover(function () {
            $(this).find('.popup').removeClass('hidden');
        }).mouseout(function () {
            $(this).find('.popup').addClass('hidden');
        });

        //侧边栏点击事件
        _this.config.sidebar.obj.on('click','.nav-item a.nav-link',function(e){
            _this.config.sidebar.activeBar = sessionStorage.activeBar = $(this).attr('href');
            if(!$(this).parents('li').hasClass('active')){
                $(this).parents('li').siblings('.active').removeClass('active');
                // $(this).addClass('active');
            }
        });
    },
    screenOperation: {
        requestFullScreen: function() {
            element = document.documentElement;
            // 判断各种浏览器，找到正确的方法
            var requestMethod = element.requestFullScreen || //W3C
                element.webkitRequestFullScreen || //Chrome等
                element.mozRequestFullScreen || //FireFox
                element.msRequestFullScreen; //IE11
            if (requestMethod) {
                requestMethod.call(element);
            } else if (typeof window.ActiveXObject !== "undefined") { //for Internet Explorer
                var wscript = new ActiveXObject("WScript.Shell");
                if (wscript !== null) {
                    wscript.SendKeys("{F11}");
                }
            }
        },
        exitFull: function() {
            // 判断各种浏览器，找到正确的方法
            var exitMethod = document.exitFullscreen || //W3C
                document.mozCancelFullScreen || //Chrome等
                document.webkitExitFullscreen || //FireFox
                document.webkitExitFullscreen; //IE11
            if (exitMethod) {
                exitMethod.call(document);
            } else if (typeof window.ActiveXObject !== "undefined") { //for Internet Explorer
                var wscript = new ActiveXObject("WScript.Shell");
                if (wscript !== null) {
                    wscript.SendKeys("{F11}");
                }
            }
        },
        isFullscreenForNoScroll: function() {
            return document.isFullScreen || document.mozIsFullScreen || document.webkitIsFullScreen
        }
    },
    toastOptions: {
        "closeButton": true, //是否显示关闭按钮
        "debug": false, //是否使用debug模式
        "positionClass": "toast-top-right", //弹出窗的位置
        "showDuration": "300", //显示的动画时间
        "hideDuration": "1000", //消失的动画时间
        "timeOut": "4000", //展现时间
        "extendedTimeOut": "1000", //加长展示时间
        "showEasing": "swing", //显示时的动画缓冲方式
        "hideEasing": "linear", //消失时的动画缓冲方式
        "showMethod": "fadeIn", //显示时的动画方式
        "hideMethod": "fadeOut", //消失时的动画方式
        "progressBar": false,
    },
    pjaxOperation: {
        init: function() {
            var e = this.config.pjax;
            e.obj.pjax(e.element, e.container);
            e.obj.on({
                'pjax:timeout': function(event) {
                    event.preventDefault();
                }
            });

            $(document).on('submit', 'form[pjax-container]', function(event) {
                $.pjax.submit(event, '#pjax-container')
            });

            $(document).on("pjax:popstate", function() {

                $(document).one("pjax:end", function(event) {
                    $(event.target).find("script[data-exec-on-popstate]").each(function() {
                        $.globalEval(this.text || this.textContent || this.innerHTML || '');
                    });
                });
            });

            $(document).on('pjax:send', function(xhr) {
                if (xhr.relatedTarget && xhr.relatedTarget.tagName && xhr.relatedTarget.tagName.toLowerCase() === 'form') {
                    $submit_btn = $('form[pjax-container] :submit');
                    if ($submit_btn) {
                        $submit_btn.button('loading')
                    }
                }
                NProgress.start();
            });

            $(document).on('pjax:complete', function(xhr) {
                if (xhr.relatedTarget && xhr.relatedTarget.tagName && xhr.relatedTarget.tagName.toLowerCase() === 'form') {
                    $submit_btn = $('form[pjax-container] :submit');
                    if ($submit_btn) {
                        $submit_btn.button('reset')
                    }
                }
                NProgress.done();
            });
        },
        modelLoad: function operation(_this) {
            let e = RPA.config.modal;
            let url = _this.attr('url');
            $(e+' .modal-content').text('').load(url);
            $(e).modal('show');
        }
    },
    initPage: function() {
        selectedMenu = RPA.config.sidebar.activeBar;
        selectedMenu = selectedMenu  == '#' ? '/admin' : selectedMenu ;
        //菜单显示
        var selector = $('.sidebar').find('a[href="' + selectedMenu + '"]');
        // selector.addClass('active');
        selector.parents('li.has-treeview').addClass('menu-open');
    },

    ///////////////////////////////////////////////////////// form start///////////////////////////////////////////////////////////

    form: {
        reset: function(e, callback){
            //重置复选框
            let formContinue = $(RPA.config.modal+' input.icheck').each(function(e){
                $(this).iCheck('uncheck');
            });
            $(e)[0].reset();//重置表单，必须放下面
        },
        response: function(callback){
            let obj = RPA.config.modal;
            toastr.success('操作成功！');
            // $.pjax.reload('#pjax-container');
            $('#tb_departments').bootstrapTable('refresh');
            if($(obj+' #form-continue').length > 0){
                $(obj+' #form-continue').is(':checked') ? RPA.form.reset(obj+' #form') : $(obj).modal('hide');;
            }
            callback ? callback() : '' ;
        },
        ajaxSubmit: function(e, FormOptions) {
            e.ajaxSubmit($.extend(true, {}, {beforeSubmit: this.formValidation,type: 'post',dataType: 'json',clearForm: false, resetForm: false}, FormOptions));
        },
        formValidation: function(arr, $form, options) {
            // 如果JQuery.Validate检测不通过则返回false
            if (!$form.valid()) {
                return false;
            }
            for (var i = 0; i < arr.length; i++) {
                //去除前后空格
                if (arr[i].type != 'file') {
                    arr[i].value = $.trim(arr[i].value);
                }
            }
        },
        errorResponse: function errorResponse(XMLHttpRequest, textStatus, errorThrown) {
            toastr.success('网络异常，请求失败！');
        },
    },
    clearCache: function(){
        $.post('/admin/clearCache', function(json){
            200 == json.code ? toastr.success('清除成功！') : toastr.error('网络异常，请求失败！');
        });
    },

    /////////////////////////////////////////////////////////bootstrap table start///////////////////////////////////////////////////////////
    TableInit: function () {
        var oTableInit = new Object();
        //初始化Table
        oTableInit.Init = function (selector, param) {
            $(selector).bootstrapTable({
                url: param.url,         //请求后台的URL（*）
                method: 'get',                      //请求方式（*）
                toolbar: '#toolbar',                //工具按钮用哪个容器
                striped: true,                      //是否显示行间隔色
                cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
                pagination: true,                   //是否显示分页（*）
                sortable: true,                     //是否启用排序
                silentSort: false,
                sortStable: true,
                sortOrder: "desc",                   //排序方式
                queryParams: oTableInit.queryParams,//传递参数（*）
                sidePagination: "server",           //分页方式：client客户端分页，server服务端分页（*）
                pageNumber:1,                       //初始化加载第一页，默认第一页
                pageSize: 10,                       //每页的记录行数（*）
                pageList: [10, 25, 50, 100],        //可供选择的每页的行数（*）
                search: false,                       //是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大
                strictSearch: true,
                showColumns: true,                  //是否显示所有的列
                showRefresh: true,                  //是否显示刷新按钮
                minimumCountColumns: 1,             //最少允许的列数
                clickToSelect: true,                //是否启用点击选中行
                // height: 800,                     //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
                uniqueId: "id",                     //每一行的唯一标识，一般为主键列
                showToggle:false,                    //是否显示详细视图和列表视图的切换按钮
                cardView: false,                    //是否显示详细视图
                detailView: false,                   //是否显示父子表
                showFullscreen: false,               //全屏显示,无效勿用
                maintainSelected: true,             //将记住checkbox的选择项
    
                columns: param.columns,
                responseHandler: function(res){
                    res.rows = res.data;
                    return res;
                },
                onDblClickRow: function (row, $element) {
                    var id = row.ID;
                    // EditViewById(id, 'view');
                },
                // onPostBody: function () {
                //     //改变复选框样式
                //     $(selector).find("input:checkbox").each(function (i) {
                //         var $check = $(this);
                //         if ($check.attr("id") && $check.next("label")) {
                //             return;
                //         }
                //         var name = $check.attr("name");
                //         var id = name + "-" + i;
                //         var $label = $('<label for="'+ id +'"></label>');
                //         $check.attr("id", id).parent().addClass("bella-checkbox").append($label);
                //     });
                //     if ($.isFunction(param.onPostBody)) {
                //         param.onPostBody();
                //     }
                // },
            });
        };
    
        return oTableInit;
    },
    getIdSelections: function (table) {
        return $.map($(table).bootstrapTable('getSelections'), function (row) {
            return row.id
        });
    },
    Echo:{
        init:function(model){
            var _this = this;
            //消息通知laravel-echo
            Echo.private(model).notification(function(obj){
                _this.content(obj);
            });
        },
        content:function (obj){
            let typeName = "";
            if(obj.typeName == 1){
                typeName = "系统公告";
            }else if(obj.typeName == 2){
                typeName = "RPA通知";
            }else{
                typeName = "管理员通知";
            }
            let html = "";
            html += '<div class="notify-wrap">'
                    + '<div class="notify-title">' + typeName + '<span class="notify-off"><i class="fa fa-envelope-o"></i></span></div>'
                    + '<div class="notify-title"><a href="JavaScript:void(0);" url="/admin/sys_message_list/view/'+ obj.id +'" onclick="operation($(this));" title="查看站内信息">' + obj.title + '</a><div>'
                    + '<div class="notify-content">' + obj.content + '</div>'
                    + '</div>';
        
            $("body").append(html);

            //播放消息提醒音乐
            var au = document.createElement("audio");
            au.preload = "auto";
            au.src = "/common/voice/qipao.mp3";
            au.play();

            //更新右上角
            if($("#notification_count span").length > 0){
                var count = $("#notification_count span").text();
                $('#notification_count span').text(1+parseInt(count));
                var html1 = '<li><a href="javascript:;" onclick="operation($(this));readEvent($(this));" url="/admin/sys_message_list/view/'+obj.id+'"><i class="fa fa-users text-aqua"></i>'+obj.title+'</a></li>';
                $("#notification_list").prepend(html1);
            }else{
                $("#notification_count").append('<span class="badge badge-warning navbar-badge">1</span>')
                var html1 = '<ul class="menu" id="notification_list"><li><a href="javascript:;" onclick="operation($(this));readEvent($(this));" url="/admin/sys_message_list/view/'+obj.id+'"><i class="fa fa-users text-aqua"></i>'+obj.title+'</a></li></ul>'
                $('.notifications-menu').html(html1);
            }

            $(".notify-wrap:last").slideDown(2000);
            setTimeout(function(){
                $(".notify-wrap:last").slideUp(2000);
            },8000);
        }
    },
    Alert:{
        howSearch:()=>{
            Swal.fire({
                type: 'info',
                title: '<strong>模糊查询说明</strong>',
                html: '<ul><li>&#91;&#93;&#92;&#92;&#94;&#36;&#46;&#124;&#63;&#42;&#43;&#40;&#41;:关键字可以是js正则元字符</li><li>&#123;&#125;&#60;&#62;&#39;&#92;&#34;&#126;&#96;&#33;&#64;&#35;&#37;&#38;&#45;&#59;&#58;&#47;&#44;&#61;:关键字可以是其他字符</li><li>关键字查找不区分大小写</li><li>空 格:关键字是空格</li></ul>'
            });
        }
    }
    /////////////////////////////////////////////////////////bootstrap table end//////////////////////////////////////////////////////////
}

var RPA = RPA.prototype;
RPA.init(window);

var operation = (e) => {
    RPA.pjaxOperation.modelLoad(e);
}

//socket
if(socket.userId){
    RPA.Echo.init('App.Models.Admin.Admin.SysAdmin.' + socket.userId);
}

//自定义函数处理queryParams的批量增加
$.fn.serializeJsonObject = function () {
    var json = {};
    var form = this.serializeArray();
    $.each(form, function () {
        if (json[this.name]) {
            if (!json[this.name].push) {
                json[this.name] = [json[this.name]];
            }
            json[this.name].push();
        } else {
            json[this.name] = this.value || '';
        }
    });
    return json;
}

/** 
 * param 将要转为URL参数字符串的对象 
 * key URL参数字符串的前缀 
 * encode true/false 是否进行URL编码,默认为true 
 *  
 * return URL参数字符串 
 */  
var urlEncode = function (param, key, encode) {  
    if(param==null) return '';  
    var paramStr = '';  
    var t = typeof (param);  
    if (t == 'string' || t == 'number' || t == 'boolean') {  
      paramStr += '&' + key + '=' + ((encode==null||encode) ? encodeURIComponent(param) : param);  
    } else {  
      for (var i in param) {  
        var k = key == null ? i : key + (param instanceof Array ? '[' + i + ']' : '.' + i);  
        paramStr += urlEncode(param[i], k, encode);  
      }  
    }  
    return paramStr;  
    // return paramStr.slice(1);  
  }; 

//datetime
function getFormatDate() {
    var nowDate = new Date();
    var year = nowDate.getFullYear();
    var month = nowDate.getMonth() + 1 < 10 ? "0" + (nowDate.getMonth() + 1) : nowDate.getMonth() + 1;
    var date = nowDate.getDate() < 10 ? "0" + nowDate.getDate() : nowDate.getDate();
    var hour = nowDate.getHours() < 10 ? "0" + nowDate.getHours() : nowDate.getHours();
    var minute = nowDate.getMinutes() < 10 ? "0" + nowDate.getMinutes() : nowDate.getMinutes();
    var second = nowDate.getSeconds() < 10 ? "0" + nowDate.getSeconds() : nowDate.getSeconds();
    return year + "-" + month + "-" + date + " " + hour + ":" + minute + ":" + second;
}

